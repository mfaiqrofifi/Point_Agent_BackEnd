// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	redem "Final_Project/business/redem"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddRedemBank provides a mock function with given fields: ctx, nameType, img, nominalReward, namaBank, poin, description
func (_m *Repository) AddRedemBank(ctx context.Context, nameType string, img string, nominalReward int, namaBank string, poin int, description string) (redem.DomainRedem, error) {
	ret := _m.Called(ctx, nameType, img, nominalReward, namaBank, poin, description)

	var r0 redem.DomainRedem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string, int, string) redem.DomainRedem); ok {
		r0 = rf(ctx, nameType, img, nominalReward, namaBank, poin, description)
	} else {
		r0 = ret.Get(0).(redem.DomainRedem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, string, int, string) error); ok {
		r1 = rf(ctx, nameType, img, nominalReward, namaBank, poin, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRedemEmoney provides a mock function with given fields: ctx, nameType, img, nominalReward, jenisEmoney, poin, description
func (_m *Repository) AddRedemEmoney(ctx context.Context, nameType string, img string, nominalReward int, jenisEmoney string, poin int, description string) (redem.DomainRedem, error) {
	ret := _m.Called(ctx, nameType, img, nominalReward, jenisEmoney, poin, description)

	var r0 redem.DomainRedem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string, int, string) redem.DomainRedem); ok {
		r0 = rf(ctx, nameType, img, nominalReward, jenisEmoney, poin, description)
	} else {
		r0 = ret.Get(0).(redem.DomainRedem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, string, int, string) error); ok {
		r1 = rf(ctx, nameType, img, nominalReward, jenisEmoney, poin, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRedemPulsa provides a mock function with given fields: ctx, nameType, img, nominalReward, jenisOperator, poin, description
func (_m *Repository) AddRedemPulsa(ctx context.Context, nameType string, img string, nominalReward int, jenisOperator string, poin int, description string) (redem.DomainRedem, error) {
	ret := _m.Called(ctx, nameType, img, nominalReward, jenisOperator, poin, description)

	var r0 redem.DomainRedem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string, int, string) redem.DomainRedem); ok {
		r0 = rf(ctx, nameType, img, nominalReward, jenisOperator, poin, description)
	} else {
		r0 = ret.Get(0).(redem.DomainRedem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, string, int, string) error); ok {
		r1 = rf(ctx, nameType, img, nominalReward, jenisOperator, poin, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRedem provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteRedem(ctx context.Context, id int) ([]redem.DomainRedem, error) {
	ret := _m.Called(ctx, id)

	var r0 []redem.DomainRedem
	if rf, ok := ret.Get(0).(func(context.Context, int) []redem.DomainRedem); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redem.DomainRedem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRedem provides a mock function with given fields: ctx, nameType, img, nominalReward, namaBank, poin, description, id
func (_m *Repository) UpdateRedem(ctx context.Context, nameType string, img string, nominalReward int, namaBank string, poin int, description string, id int) (redem.DomainRedem, error) {
	ret := _m.Called(ctx, nameType, img, nominalReward, namaBank, poin, description, id)

	var r0 redem.DomainRedem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string, int, string, int) redem.DomainRedem); ok {
		r0 = rf(ctx, nameType, img, nominalReward, namaBank, poin, description, id)
	} else {
		r0 = ret.Get(0).(redem.DomainRedem)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, string, int, string, int) error); ok {
		r1 = rf(ctx, nameType, img, nominalReward, namaBank, poin, description, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewRedem provides a mock function with given fields: ctx
func (_m *Repository) ViewRedem(ctx context.Context) ([]redem.DomainRedem, error) {
	ret := _m.Called(ctx)

	var r0 []redem.DomainRedem
	if rf, ok := ret.Get(0).(func(context.Context) []redem.DomainRedem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redem.DomainRedem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

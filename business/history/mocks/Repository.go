// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	history "Final_Project/business/history"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AllowProduct provides a mock function with given fields: ctx, idUser, stsatus
func (_m *Repository) AllowProduct(ctx context.Context, idUser int, stsatus string) (history.History, error) {
	ret := _m.Called(ctx, idUser, stsatus)

	var r0 history.History
	if rf, ok := ret.Get(0).(func(context.Context, int, string) history.History); ok {
		r0 = rf(ctx, idUser, stsatus)
	} else {
		r0 = ret.Get(0).(history.History)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, idUser, stsatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestProduct provides a mock function with given fields: ctx, idUser, idProduct, amount, img
func (_m *Repository) RequestProduct(ctx context.Context, idUser int, idProduct *int, amount int, img string) (history.History, error) {
	ret := _m.Called(ctx, idUser, idProduct, amount, img)

	var r0 history.History
	if rf, ok := ret.Get(0).(func(context.Context, int, *int, int, string) history.History); ok {
		r0 = rf(ctx, idUser, idProduct, amount, img)
	} else {
		r0 = ret.Get(0).(history.History)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *int, int, string) error); ok {
		r1 = rf(ctx, idUser, idProduct, amount, img)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestRedem provides a mock function with given fields: ctx, idUser, idReward, amount, identity
func (_m *Repository) RequestRedem(ctx context.Context, idUser int, idReward *int, amount int, identity string) (history.History, error) {
	ret := _m.Called(ctx, idUser, idReward, amount, identity)

	var r0 history.History
	if rf, ok := ret.Get(0).(func(context.Context, int, *int, int, string) history.History); ok {
		r0 = rf(ctx, idUser, idReward, amount, identity)
	} else {
		r0 = ret.Get(0).(history.History)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *int, int, string) error); ok {
		r1 = rf(ctx, idUser, idReward, amount, identity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewHistoryUser provides a mock function with given fields: ctx, idUser
func (_m *Repository) ViewHistoryUser(ctx context.Context, idUser int) ([]history.History, error) {
	ret := _m.Called(ctx, idUser)

	var r0 []history.History
	if rf, ok := ret.Get(0).(func(context.Context, int) []history.History); ok {
		r0 = rf(ctx, idUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewRedem provides a mock function with given fields: ctx
func (_m *Repository) ViewRedem(ctx context.Context) ([]history.History, error) {
	ret := _m.Called(ctx)

	var r0 []history.History
	if rf, ok := ret.Get(0).(func(context.Context) []history.History); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewRequestUser provides a mock function with given fields: ctx
func (_m *Repository) ViewRequestUser(ctx context.Context) ([]history.History, error) {
	ret := _m.Called(ctx)

	var r0 []history.History
	if rf, ok := ret.Get(0).(func(context.Context) []history.History); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]history.History)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	product "Final_Project/business/product"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryProduct is an autogenerated mock type for the RepositoryProduct type
type RepositoryProduct struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, nameProduct, poin, amount, img
func (_m *RepositoryProduct) AddProduct(ctx context.Context, nameProduct string, poin int, amount string, img string) (product.DomainProdcut, error) {
	ret := _m.Called(ctx, nameProduct, poin, amount, img)

	var r0 product.DomainProdcut
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string, string) product.DomainProdcut); ok {
		r0 = rf(ctx, nameProduct, poin, amount, img)
	} else {
		r0 = ret.Get(0).(product.DomainProdcut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, string, string) error); ok {
		r1 = rf(ctx, nameProduct, poin, amount, img)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RepositoryProduct) Delete(ctx context.Context, id int) ([]product.DomainProdcut, error) {
	ret := _m.Called(ctx, id)

	var r0 []product.DomainProdcut
	if rf, ok := ret.Get(0).(func(context.Context, int) []product.DomainProdcut); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.DomainProdcut)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductKind provides a mock function with given fields: ctx
func (_m *RepositoryProduct) ProductKind(ctx context.Context) ([]product.DomainProdcut, error) {
	ret := _m.Called(ctx)

	var r0 []product.DomainProdcut
	if rf, ok := ret.Get(0).(func(context.Context) []product.DomainProdcut); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.DomainProdcut)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, nameProduct, poin, amount, img, id
func (_m *RepositoryProduct) Update(ctx context.Context, nameProduct string, poin int, amount string, img string, id int) (product.DomainProdcut, error) {
	ret := _m.Called(ctx, nameProduct, poin, amount, img, id)

	var r0 product.DomainProdcut
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string, string, int) product.DomainProdcut); ok {
		r0 = rf(ctx, nameProduct, poin, amount, img, id)
	} else {
		r0 = ret.Get(0).(product.DomainProdcut)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, string, string, int) error); ok {
		r1 = rf(ctx, nameProduct, poin, amount, img, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

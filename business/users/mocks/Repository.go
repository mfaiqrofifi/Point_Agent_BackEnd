// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "Final_Project/business/users"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id int) ([]users.DomainUser, error) {
	ret := _m.Called(ctx, id)

	var r0 []users.DomainUser
	if rf, ok := ret.Get(0).(func(context.Context, int) []users.DomainUser); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.DomainUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeteilUser provides a mock function with given fields: ctx
func (_m *Repository) DeteilUser(ctx context.Context) ([]users.DomainUser, error) {
	ret := _m.Called(ctx)

	var r0 []users.DomainUser
	if rf, ok := ret.Get(0).(func(context.Context) []users.DomainUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.DomainUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edit provides a mock function with given fields: ctx, toko, email, password, poin, id
func (_m *Repository) Edit(ctx context.Context, toko string, email string, password string, poin int, id int) (users.DomainUser, error) {
	ret := _m.Called(ctx, toko, email, password, poin, id)

	var r0 users.DomainUser
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) users.DomainUser); ok {
		r0 = rf(ctx, toko, email, password, poin, id)
	} else {
		r0 = ret.Get(0).(users.DomainUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, int) error); ok {
		r1 = rf(ctx, toko, email, password, poin, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, email
func (_m *Repository) LoginUser(ctx context.Context, email string) (users.DomainUser, error) {
	ret := _m.Called(ctx, email)

	var r0 users.DomainUser
	if rf, ok := ret.Get(0).(func(context.Context, string) users.DomainUser); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(users.DomainUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, toko, email, password, poin
func (_m *Repository) Register(ctx context.Context, toko string, email string, password string, poin int) (users.DomainUser, error) {
	ret := _m.Called(ctx, toko, email, password, poin)

	var r0 users.DomainUser
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) users.DomainUser); ok {
		r0 = rf(ctx, toko, email, password, poin)
	} else {
		r0 = ret.Get(0).(users.DomainUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int) error); ok {
		r1 = rf(ctx, toko, email, password, poin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, userId
func (_m *Repository) User(ctx context.Context, userId int) (users.DomainUser, error) {
	ret := _m.Called(ctx, userId)

	var r0 users.DomainUser
	if rf, ok := ret.Get(0).(func(context.Context, int) users.DomainUser); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(users.DomainUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
